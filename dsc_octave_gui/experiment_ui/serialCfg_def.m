## -*- texinfo -*-
## @deftypefn  {} {} dummy()
##
## This is a dummy function documentation. This file have a lot functions
## and each one have a little documentation. This text is to avoid a warning when
## install this file as part of package.
## @end deftypefn
##
## Set the graphics toolkit and force read this file as script file (not a function file).
##
graphics_toolkit qt;
##


##
##
## Begin callbacks definitions 
##

## @deftypefn  {} {} btnCancel_doIt (@var{src}, @var{data}, @var{serialCfg})
##
## Define a callback for default action of btnCancel control.
##
## @end deftypefn
function btnCancel_doIt(src, data, serialCfg)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'have callback' from the properties edito

  parentWnd = getappdata(serialCfg.figure, "parentWnd");
  setappdata(parentWnd, "serialPort", "");
  close(serialCfg.figure);
end

## @deftypefn  {} {} btnOk_doIt (@var{src}, @var{data}, @var{serialCfg})
##
## Define a callback for default action of btnOk control.
##
## @end deftypefn
function btnOk_doIt(src, data, serialCfg)

% This code will be executed when user click the button control.
% As default, all events are deactivated, to activate must set the
% propertie 'have callback' from the properties editor
parentWnd = getappdata(serialCfg.figure, "parentWnd");
selVal = get(serialCfg.cmbSer, "Value");
listStr = get(serialCfg.cmbSer, "String");
setappdata(parentWnd, "serialPort", listStr{selVal});
close(serialCfg.figure);
end

 
## @deftypefn  {} {@var{ret} = } show_serialCfg()
##
## Create windows controls over a figure, link controls with callbacks and return 
## a window struct representation.
##
## @end deftypefn
function ret = show_serialCfg()
  _scrSize = get(0, "screensize");
  _xPos = (_scrSize(3) - 488)/2;
  _yPos = (_scrSize(4) - 129)/2;
   serialCfg = figure ( ... 
	'Color', [0.937 0.922 0.906], ...
	'Position', [_xPos _yPos 488 129], ...
	'Resize', 'on', ...
	'windowstyle', 'normal', ...
	'MenuBar', 'none');
  set(serialCfg, 'visible', 'off');
  cmbSer = uicontrol( ...
	'parent',serialCfg, ... 
	'Style','popupmenu', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.922 0.906], ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [287 64 180 25], ... 
	'String', 'Value A|Value B|Value C', ... 
	'TooltipString', '');
  btnCancel = uicontrol( ...
	'parent',serialCfg, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.922 0.906], ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [49 17 90 22], ... 
	'String', 'Cancelar', ... 
	'TooltipString', '');
  btnOk = uicontrol( ...
	'parent',serialCfg, ... 
	'Style','pushbutton', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.922 0.906], ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'Position', [349 17 90 22], ... 
	'String', 'Seleccionar', ... 
	'TooltipString', '');
  Label_2 = uicontrol( ...
	'parent',serialCfg, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.922 0.906], ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'left', ... 
	'Position', [22 97 444 17], ... 
	'String', 'El puerto serie asociado al dispositivo no se encuentra disponible.', ... 
	'TooltipString', '');
  Label_3 = uicontrol( ...
	'parent',serialCfg, ... 
	'Style','text', ... 
	'Units', 'pixels', ... 
	'BackgroundColor', [0.937 0.922 0.906], ... 
	'ForegroundColor', [0.000 0.000 0.000], ... 
	'HorizontalAlignment', 'left', ... 
	'Position', [22 67 250 17], ... 
	'String', 'Por favor, indique el puerto a utilizar:', ... 
	'TooltipString', '');


  serialCfg = struct( ...
      'figure', serialCfg, ...
      'cmbSer', cmbSer, ...
      'btnCancel', btnCancel, ...
      'btnOk', btnOk, ...
      'Label_2', Label_2, ...
      'Label_3', Label_3);


  set (btnCancel, 'callback', {@btnCancel_doIt, serialCfg});
  set (btnOk, 'callback', {@btnOk_doIt, serialCfg});
  dlg = struct(serialCfg);
  set(serialCfg.figure, 'visible', 'on');

%
% The source code writed here will be executed when
% windows load. Work like 'onLoad' event of other languages.
%
pkg load instrument-control;

  set(serialCfg.cmbSer, 'String', seriallist ());
  refresh(serialCfg.figure);

  ret = serialCfg;
end

